Newsqueak2
'LangexplrExperiments'

class HCalendar usingLib: platform = NewspeakObject (
"Experiment for displaying a calendar en Hopscotch."
|
     Subject = platform Subject.
     Presenter = platform HPresenter.
     Date = platform Date.
     Month = platform Month.
|
)
(

class CalendarSubject = Subject (
"Test subject"
|
  public theMonth = Date today month.
  public theYear = Date today year.
|
)
('as yet unclassified'
createPresenter = (
	^CalendarPresenter new subject: self.
)

)

class CalendarPresenter = Presenter (
" Presenter."
|
|
)
('as yet unclassified'
definition = (
	^column: {
            label:: subject theMonth name, ' ' , subject theYear asString.
            weeks.
       }.
)

fragmentForDaysNotInCurrentMonth = (
	^label: '  '.
)

weekDayFragmentFor: dayNumber = (
	^label:: dayNumber asString.
)

weeks = (
	|firstDayOfMonth result t previousMonthDays nextMonthDays 
       weeksToShow lastday|
      firstDayOfMonth:: Date year: (subject theYear) 
                                        month: (subject theMonth name) 
                                        day: 1.
      previousMonthDays:: firstDayOfMonth dayOfWeek - 1.
      nextMonthDays:: 7 - ((((subject theMonth daysInMonth) + previousMonthDays)) rem: 7) .
      weeksToShow:: ((subject theMonth daysInMonth) + 
                                 previousMonthDays + nextMonthDays) / 7.

      result::  (1 to: 7) collect: [ :x | Array new: weeksToShow ].
       (1 to: 7) 
            do: [:d|  t:: result at: d.
                        (d <= previousMonthDays)  
                           ifTrue: [t at: 1 put: fragmentForDaysNotInCurrentMonth]
                           ifFalse: [t at: 1 put: (weekDayFragmentFor: (d - previousMonthDays))]].

      lastday:: 7 - previousMonthDays.
      2 to: (weeksToShow - 1) 
         do: [:week | 
                  (1 to: 7) do: [:day|
                                          lastday:: lastday+1.
                                          t:: result at: day.
                                          t at: week put: (weekDayFragmentFor: lastday).
                                                     ]].
      lastday::lastday.
       (1 to: 7) do: [:d|  lastday:: lastday+1.
                                 t:: result at: d.
                                (d >= nextMonthDays)  
                                     ifTrue: [t at: (weeksToShow - 1)  
                                                  put: fragmentForDaysNotInCurrentMonth]
                                     ifFalse: [t at: (weeksToShow - 1)  
                                                    put: (weekDayFragmentFor: lastday)  ].
                                                   ]  .
      ^row: (result collect: [:a | column: a]).
)

))