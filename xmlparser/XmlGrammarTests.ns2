Newsqueak2
'LangexplrExperiments'

class XmlGrammarTests usingPlatform: platform testFramework: unitTesting = NewspeakObject (
"Test for the XmlGrammar"
|
      protected TestCase = unitTesting TestCase.
      protected Platform = platform .
      protected BlocklessCombinatorialParsing = platform BlocklessCombinatorialParsing.
      protected XmlTools = platform XmlTools .
      protected  ReadStream = platform ReadStream.
      private CharacterReadWriteStream = platform streams CharacterReadWriteStream. 
|
)
(

class XmlGenerationTestCase selector: s = TestCase selector: s (
"Tests for XML generation utilities"
|
|
)
(

class BasicConfiguration = TestConfiguration(
"Configuration for XML Generation testcase"
|
|
)
('as yet unclassified'
configure: platform = (
	|unitTestLib|

      unitTestLib:: platform NSUnit NSUnit usingPlatform: (platform NsPlatform soleInstance).
      ^((platform XmlGrammarTests) 
                usingPlatform:  (platform NsPlatform soleInstance) 
                testFramework: unitTestLib) XmlGenerationTestCase.
)

)'as yet unclassified'
getTestingWriter: output = (
      |platform|
      platform:: Platform new.
	^(XmlTools 
                     withParserLibClass: BlocklessCombinatorialParsing  
                     usingLib: platform) basicWriter: output.
)

testAttributeValueEscaping = (
      |writer output|
      output:: CharacterReadWriteStream on:  (String new: 5).
      writer:: getTestingWriter: output .
      writer writeStartElement: 'foo'.
      writer writeAttribute: 'fId1' value: 'o"n"e'.

      writer writeEndElement.

	assert: [output contentsWritten = '<foo fId1="o&quot;n&quot;e" />'].
)

testBasicNestedElementGeneration = (
      |writer output|
      output:: CharacterReadWriteStream on:  (String new: 5).
      writer:: getTestingWriter: output .
      writer writeStartElement: 'foo'.
          writer writeStartElement: 'foo1'.
          writer writeEndElement.
          writer writeStartElement: 'foo2'.
          writer writeEndElement.
          writer writeStartElement: 'foo3'.
              writer writeStartElement: 'foo4'.
              writer writeEndElement.
          writer writeEndElement.

      writer writeEndElement.

	assert: [output contentsWritten = '<foo><foo1 /><foo2 /><foo3><foo4 /></foo3></foo>'].
)

testBasicNestedElementGenerationWithNamespace = (
      |writer output ns p|
      output:: CharacterReadWriteStream on:  (String new: 5).
      writer:: getTestingWriter: output .
      ns:: 'http://goo'.
      p:: 'g'.
      writer writeStartElement: 'foo' namespace: ns prefix: 'g'.
          writer writeStartElement: 'foo1' namespace: ns.
          writer writeEndElement.
          writer writeStartElement: 'foo2' namespace: ns.
          writer writeEndElement.
          writer writeStartElement: 'foo3' namespace: 'http://zoo'.
              writer writeStartElement: 'foo4' namespace: ns.
              writer writeEndElement.
          writer writeEndElement.

      writer writeEndElement.

	assert: [output contentsWritten = '<g:foo g:xmlns="http://goo"><g:foo1 /><g:foo2 /><foo3 xmlns="http://zoo"><g:foo4 /></foo3></g:foo>'].
)

testBasicNestedElementGenerationWithNamespaceAndPrefix = (
      |writer output ns|
      output:: CharacterReadWriteStream on:  (String new: 5).
      writer:: getTestingWriter: output .
      ns:: 'http://goo'.
      writer writeStartElement: 'foo' namespace: ns.
          writer writeStartElement: 'foo1' namespace: ns.
          writer writeEndElement.
          writer writeStartElement: 'foo2' namespace: ns.
          writer writeEndElement.
          writer writeStartElement: 'foo3' namespace: 'http://zoo'.
              writer writeStartElement: 'foo4' namespace: ns.
              writer writeEndElement.
          writer writeEndElement.

      writer writeEndElement.

	assert: [output contentsWritten = '<foo xmlns="http://goo"><foo1 /><foo2 /><foo3 xmlns="http://zoo"><foo4 xmlns="http://goo" /></foo3></foo>'].
)

testEscapedTextElementGeneration = (
      |writer output|
      output:: CharacterReadWriteStream on:  (String new: 5).
      writer:: getTestingWriter: output .
      writer writeStartElement: 'foo'.
      writer writeText: '<e at="&amp;" />'.
      writer writeEndElement.

	assert: [output contentsWritten = '<foo>&lt;e at=&quot;&amp;amp;&quot; /&gt;</foo>'].
)

testSingleAttributesGeneration = (
      |writer output|
      output:: CharacterReadWriteStream on:  (String new: 5).
      writer:: getTestingWriter: output .
      writer writeStartElement: 'foo'.
      writer writeAttribute: 'fId1' value: 'one'.
      writer writeAttribute: 'fId2' value: 'two'.


      writer writeEndElement.

	assert: [output contentsWritten = '<foo fId1="one" fId2="two" />'].
)

testSingleAttributesGenerationWithNamespace = (
      |writer output|
      output:: CharacterReadWriteStream on:  (String new: 5).
      writer:: getTestingWriter: output .
      writer writeStartElement: 'foo'.
      writer writeAttribute: 'fId1' value: 'one' namespace: 'http://loo' prefix: 'k'.
      writer writeAttribute: 'fId2' value: 'two' namespace: 'http://loo' prefix: 'k'.


      writer writeEndElement.

	assert: [output contentsWritten = '<foo k:xmlns="http://loo" k:fId1="one" k:fId2="two" />'].
)

testSingleAttributesNestedElementGeneration = (
      |writer output|
      output:: CharacterReadWriteStream on:  (String new: 5).
      writer:: getTestingWriter: output .
      writer writeStartElement: 'foo'.
      writer writeAttribute: 'fId1' value: 'one'.
      writer writeAttribute: 'fId2' value: 'two'.
      writer writeStartElement: 'goo'.
      writer writeEndElement.
      writer writeEndElement.

	assert: [output contentsWritten = '<foo fId1="one" fId2="two"><goo /></foo>'].
)

testSingleElementGeneration = (
      |writer output|
      output:: CharacterReadWriteStream on:  (String new: 5).
      writer:: getTestingWriter: output .
      writer writeStartElement: 'foo'.
      writer writeEndElement.

	assert: [output contentsWritten = '<foo />'].
)

testSingleElementGenerationWithNamespace = (
      |writer output|
      output:: CharacterReadWriteStream on:  (String new: 5).
      writer:: getTestingWriter: output .
      writer writeStartElement: 'foo' namespace: 'http://goo'.
      writer writeEndElement.

	assert: [output contentsWritten = '<foo xmlns="http://goo" />'].
)

testTextElementGeneration = (
      |writer output|
      output:: CharacterReadWriteStream on:  (String new: 5).
      writer:: getTestingWriter: output .
      writer writeStartElement: 'foo'.
      writer writeAttribute: 'fId1' value: 'one'.
      writer writeAttribute: 'fId2' value: 'two'.

      writer writeText: 'Hola'.
      writer writeEndElement.

	assert: [output contentsWritten = '<foo fId1="one" fId2="two">Hola</foo>'].
)

)

class XmlParserSectionsTestCase selector: s = TestCase selector: s (
"Test case for the different sections of an XML Document."
|
     
|
)
(

class BasicConfiguration = TestConfiguration (
""
|
|
)
('as yet unclassified'
configure: platform = (
	|unitTestLib|

      unitTestLib:: platform NSUnit NSUnit usingPlatform: (platform NsPlatform soleInstance).
      ^((platform XmlGrammarTests) 
                usingPlatform:  (platform NsPlatform soleInstance) 
                testFramework: unitTestLib) XmlParserSectionsTestCase.
)

)'as yet unclassified'
getTestingNsParser = (
      |platform|
      platform:: Platform new.
	^(XmlTools 
                     withParserLibClass: BlocklessCombinatorialParsing  
                     usingLib: platform) parserWithNamespaceSupport.
)

getTestingParser = (
      |platform|
      platform:: Platform new.
	^(XmlTools 
                     withParserLibClass: BlocklessCombinatorialParsing  
                     usingLib: platform) basicParser.
)

getXmlNsParserContext = (
      |platform|
      platform:: Platform new.
	^(XmlTools 
                     withParserLib: (BlocklessCombinatorialParsing  usingLib: platform)
                     usingLib: platform) XmlNamespaceParserContext new.
)

parserErrorClass = (
      |platform|
      platform:: Platform new.
	^((BlocklessCombinatorialParsing  usingLib: platform) ParserError)
)

streamFromString: str = (
	 ^ReadStream on:str from:1 to:(str size).
)

testAttributeWithEntities = (
	|parser r|
      parser:: getTestingParser element .
      r:: parser parse: (streamFromString: '<myElement foo="x&amp;x"/>').
	assert:[r attributes size = 1].
	assert:[(r attributes withName: 'foo') = 'x&x'].
)

testElementDifferentLevelNamespaces = (
	|parser r |
      parser:: xmlNsParserWrapper: (getTestingNsParser element) .
      r:: parser parse: (streamFromString: '<myElement xmlns="http://foo">
                                                                     <childElement xmlns="http://goo"/>
                                                                     <childElement >
                                                                         <xchildElement xmlns="http://loo"/>
                                                                     </childElement >
                                                                     <childElement >
                                                                         <xchildElement />
                                                                     </childElement >
                                                                   </myElement>') .
                     
      assert:[r name asString = 'myElement'].
      assert:[r name namespace = 'http://foo'].
	assert:[((r childNodes at: 1) name asString) = 'childElement'].
      assert:[((r childNodes at: 1) name namespace) = 'http://goo'].

	assert:[((r childNodes at: 2) name asString) = 'childElement'].
      assert:[((r childNodes at: 2) name namespace) = 'http://foo'].
	assert:[(((r childNodes at: 2) childNodes at: 1) name asString) = 'xchildElement'].
      assert:[(((r childNodes at: 2) childNodes at: 1) name namespace) = 'http://loo'].

	assert:[((r childNodes at: 3) name asString) = 'childElement'].
      assert:[((r childNodes at: 3) name namespace) = 'http://foo'].
	assert:[(((r childNodes at: 3) childNodes at: 1) name asString) = 'xchildElement'].
      assert:[(((r childNodes at: 3) childNodes at: 1) attributes size) = 0].
      assert:[(((r childNodes at: 3) childNodes at: 1) name namespace) = 'http://foo'].

 
)

testElementDifferentLevelPrefixNamespaces = (
	|parser r |
      parser:: xmlNsParserWrapper: (getTestingNsParser element) .
      r:: parser parse: (streamFromString: '<pro:myElement pro:xmlns="http://foo">
                                                                     <childElement xmlns="http://goo"/>
                                                                     <pro:childElement >
                                                                         <xchildElement xmlns="http://loo"/>
                                                                     </pro:childElement >
                                                                     <pro:childElement >
                                                                         <xchildElement />
                                                                     </pro:childElement >
                                                                   </pro:myElement>') .
                     
      assert:[r name asString = 'pro:myElement'].
      assert:[r name namespace = 'http://foo'].
	assert:[((r childNodes at: 1) name asString) = 'childElement'].
      assert:[((r childNodes at: 1) name namespace) = 'http://goo'].

	assert:[((r childNodes at: 2) name asString) = 'pro:childElement'].
      assert:[((r childNodes at: 2) name namespace) = 'http://foo'].
	assert:[(((r childNodes at: 2) childNodes at: 1) name asString) = 'xchildElement'].
      assert:[(((r childNodes at: 2) childNodes at: 1) name namespace) = 'http://loo'].

	assert:[((r childNodes at: 3) name asString) = 'pro:childElement'].
      assert:[((r childNodes at: 3) name namespace) = 'http://foo'].
	assert:[(((r childNodes at: 3) childNodes at: 1) name asString) = 'xchildElement'].
      assert:[(((r childNodes at: 3) childNodes at: 1) attributes size) = 0].
      assert:[(((r childNodes at: 3) childNodes at: 1) name namespace) = nil].

 
)

testElementWithAttributesWithNamespaces = (
	|parser r ctxt|
      parser:: xmlNsParserWrapper: (getTestingNsParser element) .

      r:: parser parse: (streamFromString: '<myElement h:xmlns="http://foo"><childElement1 h:foo="attvalue" foo="altval" /></myElement>') .
                     
	assert:[r childNodes size = 1].
      assert:[r name asString = 'myElement'].
      assert:[r name namespace = nil].
	assert:[((r childNodes at: 1) name asString) = 'childElement1'].
      assert:[((r childNodes at: 1) name namespace) = nil].
      assert:[((r childNodes at: 1) attributes withName: 'foo' andNamespace: 'http://foo') = 'attvalue'].
      assert:[((r childNodes at: 1) attributes withName: 'foo' andNamespace: nil) = 'altval'].
 
)

testElementWithOneCDataChild = (
	|parser r|
      parser:: getTestingParser element .
      r:: parser parse: (streamFromString: '<myElement><![CDATA[H<<<el>>lo]]></myElement>').
      assert:[r name asString = 'myElement'].
	assert:[r childNodes size = 1].
	assert:[((r childNodes at: 1) asString) = 'H<<<el>>lo'].

)

testElementWithOneChild = (
	|parser r|
      parser:: getTestingParser element .
      r:: parser parse: (streamFromString: '<myElement><childElement1/></myElement>').
	assert:[r childNodes size = 1].
      assert:[r name asString = 'myElement'].
	assert:[((r childNodes at: 1) name asString) = 'childElement1'].

)

testElementWithOneChildWithDifferentNamespaces = (
	|parser r ctxt|
      parser:: xmlNsParserWrapper: (getTestingNsParser element) .

      r:: parser parse: (streamFromString: '<myElement xmlns="http://foo"><childElement1 xmlns="http://goo"/></myElement>') .
                     
	assert:[r childNodes size = 1].
      assert:[r name asString = 'myElement'].
      assert:[r name namespace = 'http://foo'].
	assert:[((r childNodes at: 1) name asString) = 'childElement1'].
      assert:[((r childNodes at: 1) name namespace) = 'http://goo'].
 
)

testElementWithOneChildWithNamespaces = (
	|parser r ctxt|
      parser:: xmlNsParserWrapper: (getTestingNsParser element) .
      r:: parser parse: (streamFromString: '<myElement xmlns="http://foo"><childElement1/></myElement>') .
                     
	assert:[r childNodes size = 1].
      assert:[r name asString = 'myElement'].
      assert:[r name namespace = 'http://foo'].
	assert:[((r childNodes at: 1) name asString) = 'childElement1'].
      assert:[((r childNodes at: 1) name namespace) = 'http://foo'].
 
)

testElementWithOneTextChild = (
	|parser r|
      parser:: getTestingParser element .
      r:: parser parse: (streamFromString: '<myElement>Hello</myElement>').
      assert:[r name asString = 'myElement'].
	assert:[r childNodes size = 1].
	assert:[((r childNodes at: 1) asString) = 'Hello'].

)

testElementWithOneTextChildWithEntities = (
	|parser r|
      parser:: getTestingParser element .
      r:: parser parse: (streamFromString: '<myElement>He&amp;llo</myElement>').
      assert:[r name asString = 'myElement'].
	assert:[r childNodes size = 1].
	assert:[((r childNodes at: 1) asString) = 'He&llo'].

)

testElementWithOneTextChildWithHexNumericEntities = (
	|parser r|
      parser:: getTestingParser element .
      r:: parser parse: (streamFromString: '<myElement>He&#x003C;llo</myElement>').
      assert:[r name asString = 'myElement'].
	assert:[r childNodes size = 1].
	assert:[((r childNodes at: 1) asString) = 'He<llo'].

)

testElementWithOneTextChildWithNumericEntities = (
	|parser r|
      parser:: getTestingParser element .
      r:: parser parse: (streamFromString: '<myElement>He&#60;llo</myElement>').
      assert:[r name asString = 'myElement'].
	assert:[r childNodes size = 1].
	assert:[((r childNodes at: 1) asString) = 'He<llo'].

)

testElementWithTwoElementChildren = (
	|parser r|
      parser:: getTestingParser element .
      r:: parser parse: (streamFromString: '<myElement><childElement1/><childElement2/></myElement>').
      assert:[r name asString = 'myElement'].
	assert:[r childNodes size = 2].
	assert:[((r childNodes at: 1) name asString) = 'childElement1'].
	assert:[((r childNodes at: 2) name asString) = 'childElement2'].


)

testElementWithTwoElementChildrenOfDifferentType = (
	|parser r|
      parser:: getTestingParser element .
      r:: parser parse: (streamFromString: '<myElement>Hola<childElement2/></myElement>').
      assert:[r name asString = 'myElement'].
	assert:[r childNodes size = 2].
	assert:[((r childNodes at: 1) asString) = 'Hola'].
	assert:[((r childNodes at: 2) name asString) = 'childElement2'].


)

testElementWithWhitespaceInEndTag = (
	|parser r|
      parser:: getTestingParser element .
      r:: parser parse: (streamFromString: '<myElement></myElement  >').
	assert:[r childNodes size = 0].
      assert:[r name asString = 'myElement'].


)

testOpenCloseElement = (
	|parser r|
      parser:: getTestingParser element .
      r:: parser parse: (streamFromString: '<myElement foo="xx"> </myElement>').
	assert:[(r attributes withName: 'foo') = 'xx'].
)

testSimpleElementOneAttribute = (
	|parser r|
      parser:: getTestingParser element .
      r:: parser parse: (streamFromString: '<myElement foo="xx"/>').
	assert:[r attributes size = 1].
)

testSimpleElementTwoAttributes = (
	|parser r|
      parser:: getTestingParser element .
      r:: parser parse: (streamFromString: '<myElement foo="xx"/>').
	assert:[(r attributes withName: 'foo') = 'xx'].
)

testSimpleEmptyElement = (
	|parser r|
      parser:: getTestingParser element .
      r:: parser parse: (streamFromString: '<myElement />').
	assert:[r name asString = 'myElement'].
)

testXmlDecl = (
      |parser r|
      parser:: getTestingParser XMLDecl .
      r:: parser parse: (streamFromString: '<?xml version="1.0" ?>').
	assert:[r version = 1.0].
)

xmlNsParserWrapper: innerParser = (
	^innerParser
)

))